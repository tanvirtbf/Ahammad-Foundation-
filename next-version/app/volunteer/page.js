'use client';
import { useState } from 'react';

export default function Volunteer() {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    age: '',
    gender: '',
    address: '',
    education: '',
    profession: '',
    experience: '',
    interests: [],
    availability: '',
    motivation: '',
    skills: '',
    emergencyContact: '',
    emergencyPhone: ''
  });

  const [errors, setErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isSubmitted, setIsSubmitted] = useState(false);

  const interestOptions = [
    { id: 'education', label: '‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ', icon: 'üìö' },
    { id: 'health', label: '‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶∏‡ßá‡¶¨‡¶æ', icon: 'üè•' },
    { id: 'food', label: '‡¶ñ‡¶æ‡¶¶‡ßç‡¶Ø ‡¶¨‡¶ø‡¶§‡¶∞‡¶£', icon: 'üçΩÔ∏è' },
    { id: 'disaster', label: '‡¶¶‡ßÅ‡¶∞‡ßç‡¶Ø‡ßã‡¶ó ‡¶§‡ßç‡¶∞‡¶æ‡¶£', icon: 'üÜò' },
    { id: 'training', label: '‡¶™‡ßç‡¶∞‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶£', icon: 'üõ†Ô∏è' },
    { id: 'fundraising', label: '‡¶§‡¶π‡¶¨‡¶ø‡¶≤ ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π', icon: 'üí∞' },
    { id: 'admin', label: '‡¶™‡ßç‡¶∞‡¶∂‡¶æ‡¶∏‡¶®‡¶ø‡¶ï ‡¶ï‡¶æ‡¶ú', icon: 'üìã' },
    { id: 'media', label: '‡¶Æ‡¶ø‡¶°‡¶ø‡¶Ø‡¶º‡¶æ ‡¶ì ‡¶™‡ßç‡¶∞‡¶ö‡¶æ‡¶∞', icon: 'üì¢' }
  ];

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const handleInterestChange = (interestId) => {
    setFormData(prev => ({
      ...prev,
      interests: prev.interests.includes(interestId)
        ? prev.interests.filter(id => id !== interestId)
        : [...prev.interests, interestId]
    }));
  };

  const validateForm = () => {
    const newErrors = {};

    if (!formData.name.trim()) newErrors.name = '‡¶®‡¶æ‡¶Æ ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï';
    if (!formData.email.trim()) newErrors.email = '‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï';
    else if (!/\S+@\S+\.\S+/.test(formData.email)) newErrors.email = '‡¶∏‡¶†‡¶ø‡¶ï ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶¶‡¶ø‡¶®';
    if (!formData.phone.trim()) newErrors.phone = '‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï';
    else if (!/^[0-9+\-\s()]+$/.test(formData.phone)) newErrors.phone = '‡¶∏‡¶†‡¶ø‡¶ï ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶ø‡¶®';
    if (!formData.age) newErrors.age = '‡¶¨‡¶Ø‡¶º‡¶∏ ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï';
    else if (formData.age < 16 || formData.age > 80) newErrors.age = '‡¶¨‡¶Ø‡¶º‡¶∏ ‡ßß‡ß¨-‡ßÆ‡ß¶ ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá';
    if (!formData.gender) newErrors.gender = '‡¶≤‡¶ø‡¶ô‡ßç‡¶ó ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®';
    if (!formData.address.trim()) newErrors.address = '‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï';
    if (!formData.education.trim()) newErrors.education = '‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶ó‡¶§ ‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø‡¶§‡¶æ ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï';
    if (!formData.availability) newErrors.availability = '‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®';
    if (!formData.motivation.trim()) newErrors.motivation = '‡¶Ö‡¶®‡ßÅ‡¶™‡ßç‡¶∞‡ßá‡¶∞‡¶£‡¶æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®';
    if (formData.interests.length === 0) newErrors.interests = '‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ü‡¶ó‡ßç‡¶∞‡¶π‡ßá‡¶∞ ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®';
    if (!formData.emergencyContact.trim()) newErrors.emergencyContact = '‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï';
    if (!formData.emergencyPhone.trim()) newErrors.emergencyPhone = '‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó‡ßá‡¶∞ ‡¶´‡ßã‡¶® ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï';

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) return;

    setIsSubmitting(true);
    
    // Simulate API call
    setTimeout(() => {
      setIsSubmitting(false);
      setIsSubmitted(true);
    }, 2000);
  };

  if (isSubmitted) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center py-20">
        <div className="max-w-md mx-auto bg-white rounded-xl shadow-lg p-8 text-center">
          <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg className="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7"></path>
            </svg>
          </div>
          <h2 className="text-2xl font-bold text-gray-800 mb-4">
            ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶®‡¶ø‡¶¨‡¶®‡ßç‡¶ß‡¶ø‡¶§ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!
          </h2>
          <p className="text-gray-600 mb-6">
            ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ü‡¶¨‡ßá‡¶¶‡¶® ‡¶™‡ßá‡¶Ø‡¶º‡ßá‡¶õ‡¶ø‡•§ ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶∂‡ßÄ‡¶ò‡ßç‡¶∞‡¶á ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶¨‡•§
          </p>
          <button
            onClick={() => {
              setIsSubmitted(false);
              setFormData({
                name: '', email: '', phone: '', age: '', gender: '', address: '',
                education: '', profession: '', experience: '', interests: [],
                availability: '', motivation: '', skills: '', emergencyContact: '', emergencyPhone: ''
              });
            }}
            className="bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors"
          >
            ‡¶®‡¶§‡ßÅ‡¶® ‡¶Ü‡¶¨‡ßá‡¶¶‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Hero Section */}
      <section className="bg-gradient-to-r from-green-600 to-blue-600 text-white py-20">
        <div className="container mx-auto px-4 text-center">
          <h1 className="text-5xl font-bold mb-6 animate-fade-in">
            ‡¶∏‡ßç‡¶¨‡ßá‡¶ö‡ßç‡¶õ‡¶æ‡¶∏‡ßá‡¶¨‡¶ï ‡¶®‡¶ø‡¶¨‡¶®‡ßç‡¶ß‡¶®
          </h1>
          <p className="text-xl max-w-3xl mx-auto opacity-90">
            ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶π‡¶Ø‡¶º‡ßá ‡¶∏‡¶Æ‡¶æ‡¶ú‡ßá‡¶∞ ‡¶ï‡¶≤‡ßç‡¶Ø‡¶æ‡¶£‡ßá ‡¶Ö‡¶¨‡¶¶‡¶æ‡¶® ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®‡•§ 
            ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶ì ‡¶¶‡¶ï‡ßç‡¶∑‡¶§‡¶æ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ö‡¶∏‡¶π‡¶æ‡¶Ø‡¶º ‡¶Æ‡¶æ‡¶®‡ßÅ‡¶∑‡¶¶‡ßá‡¶∞ ‡¶™‡¶æ‡¶∂‡ßá ‡¶¶‡¶æ‡¶Å‡¶°‡¶º‡¶æ‡¶®‡•§
          </p>
        </div>
      </section>

      {/* Why Volunteer Section */}
      <section className="py-16 bg-white">
        <div className="container mx-auto px-4">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold text-gray-800 mb-4">
              ‡¶ï‡ßá‡¶® ‡¶∏‡ßç‡¶¨‡ßá‡¶ö‡ßç‡¶õ‡¶æ‡¶∏‡ßá‡¶¨‡¶ï ‡¶π‡¶¨‡ßá‡¶®?
            </h2>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {[
              {
                icon: "‚ù§Ô∏è",
                title: "‡¶∏‡¶Æ‡¶æ‡¶ú‡¶∏‡ßá‡¶¨‡¶æ",
                description: "‡¶Ö‡¶∏‡¶π‡¶æ‡¶Ø‡¶º ‡¶Æ‡¶æ‡¶®‡ßÅ‡¶∑‡¶¶‡ßá‡¶∞ ‡¶™‡¶æ‡¶∂‡ßá ‡¶¶‡¶æ‡¶Å‡¶°‡¶º‡¶ø‡¶Ø‡¶º‡ßá ‡¶∏‡¶Æ‡¶æ‡¶ú‡ßá ‡¶á‡¶§‡¶ø‡¶¨‡¶æ‡¶ö‡¶ï ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶Ü‡¶®‡ßÅ‡¶®"
              },
              {
                icon: "ü§ù",
                title: "‡¶®‡ßá‡¶ü‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï‡¶ø‡¶Ç",
                description: "‡¶∏‡¶Æ‡¶Æ‡¶®‡¶æ ‡¶Æ‡¶æ‡¶®‡ßÅ‡¶∑‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶™‡¶∞‡¶ø‡¶ö‡¶ø‡¶§ ‡¶π‡¶® ‡¶è‡¶¨‡¶Ç ‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡¶§‡ßç‡¶¨ ‡¶ó‡¶°‡¶º‡ßÅ‡¶®"
              },
              {
                icon: "üéØ",
                title: "‡¶¶‡¶ï‡ßç‡¶∑‡¶§‡¶æ ‡¶¨‡ßÉ‡¶¶‡ßç‡¶ß‡¶ø",
                description: "‡¶®‡¶§‡ßÅ‡¶® ‡¶¶‡¶ï‡ßç‡¶∑‡¶§‡¶æ ‡¶∂‡¶ø‡¶ñ‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶®‡ßá‡¶§‡ßÉ‡¶§‡ßç‡¶¨‡ßá‡¶∞ ‡¶ó‡ßÅ‡¶£‡¶æ‡¶¨‡¶≤‡ßÄ ‡¶¨‡¶ø‡¶ï‡¶∂‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®"
              }
            ].map((benefit, index) => (
              <div key={index} className="text-center p-6 bg-gray-50 rounded-xl">
                <div className="text-4xl mb-4">{benefit.icon}</div>
                <h3 className="text-xl font-semibold text-gray-800 mb-3">
                  {benefit.title}
                </h3>
                <p className="text-gray-600">
                  {benefit.description}
                </p>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Registration Form */}
      <section className="py-20">
        <div className="container mx-auto px-4">
          <div className="max-w-4xl mx-auto bg-white rounded-xl shadow-lg p-8">
            <h2 className="text-3xl font-bold text-gray-800 mb-8 text-center">
              ‡¶®‡¶ø‡¶¨‡¶®‡ßç‡¶ß‡¶® ‡¶´‡¶∞‡ßç‡¶Æ
            </h2>
            
            <form onSubmit={handleSubmit} className="space-y-6">
              {/* Personal Information */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶®‡¶æ‡¶Æ *
                  </label>
                  <input
                    type="text"
                    name="name"
                    value={formData.name}
                    onChange={handleInputChange}
                    className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent ${
                      errors.name ? 'border-red-500' : 'border-gray-300'
                    }`}
                    placeholder="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®"
                  />
                  {errors.name && <p className="text-red-500 text-sm mt-1">{errors.name}</p>}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ *
                  </label>
                  <input
                    type="email"
                    name="email"
                    value={formData.email}
                    onChange={handleInputChange}
                    className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent ${
                      errors.email ? 'border-red-500' : 'border-gray-300'
                    }`}
                    placeholder="example@email.com"
                  />
                  {errors.email && <p className="text-red-500 text-sm mt-1">{errors.email}</p>}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ *
                  </label>
                  <input
                    type="tel"
                    name="phone"
                    value={formData.phone}
                    onChange={handleInputChange}
                    className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent ${
                      errors.phone ? 'border-red-500' : 'border-gray-300'
                    }`}
                    placeholder="+‡ßÆ‡ßÆ‡ß¶ ‡ßß‡ß≠xxxxxxxx"
                  />
                  {errors.phone && <p className="text-red-500 text-sm mt-1">{errors.phone}</p>}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ‡¶¨‡¶Ø‡¶º‡¶∏ *
                  </label>
                  <input
                    type="number"
                    name="age"
                    value={formData.age}
                    onChange={handleInputChange}
                    min="16"
                    max="80"
                    className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent ${
                      errors.age ? 'border-red-500' : 'border-gray-300'
                    }`}
                    placeholder="‡ß®‡ß´"
                  />
                  {errors.age && <p className="text-red-500 text-sm mt-1">{errors.age}</p>}
                </div>
              </div>

              {/* Gender */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ‡¶≤‡¶ø‡¶ô‡ßç‡¶ó *
                </label>
                <div className="flex space-x-4">
                  {['‡¶™‡ßÅ‡¶∞‡ßÅ‡¶∑', '‡¶Æ‡¶π‡¶ø‡¶≤‡¶æ', '‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø'].map((gender) => (
                    <label key={gender} className="flex items-center">
                      <input
                        type="radio"
                        name="gender"
                        value={gender}
                        checked={formData.gender === gender}
                        onChange={handleInputChange}
                        className="mr-2 text-green-600 focus:ring-green-500"
                      />
                      {gender}
                    </label>
                  ))}
                </div>
                {errors.gender && <p className="text-red-500 text-sm mt-1">{errors.gender}</p>}
              </div>

              {/* Address */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ *
                </label>
                <textarea
                  name="address"
                  value={formData.address}
                  onChange={handleInputChange}
                  rows="3"
                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent ${
                    errors.address ? 'border-red-500' : 'border-gray-300'
                  }`}
                  placeholder="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®"
                />
                {errors.address && <p className="text-red-500 text-sm mt-1">{errors.address}</p>}
              </div>

              {/* Education and Profession */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶ó‡¶§ ‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø‡¶§‡¶æ *
                  </label>
                  <input
                    type="text"
                    name="education"
                    value={formData.education}
                    onChange={handleInputChange}
                    className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent ${
                      errors.education ? 'border-red-500' : 'border-gray-300'
                    }`}
                    placeholder="‡¶Ø‡ßá‡¶Æ‡¶®: ‡¶∏‡ßç‡¶®‡¶æ‡¶§‡¶ï, ‡¶è‡¶á‡¶ö‡¶è‡¶∏‡¶∏‡¶ø ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø"
                  />
                  {errors.education && <p className="text-red-500 text-sm mt-1">{errors.education}</p>}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ‡¶™‡ßá‡¶∂‡¶æ
                  </label>
                  <input
                    type="text"
                    name="profession"
                    value={formData.profession}
                    onChange={handleInputChange}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                    placeholder="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶™‡ßá‡¶∂‡¶æ"
                  />
                </div>
              </div>

              {/* Interests */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-4">
                  ‡¶Ü‡¶ó‡ßç‡¶∞‡¶π‡ßá‡¶∞ ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞ * (‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®)
                </label>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                  {interestOptions.map((interest) => (
                    <label
                      key={interest.id}
                      className={`flex items-center p-3 border rounded-lg cursor-pointer transition-all ${
                        formData.interests.includes(interest.id)
                          ? 'border-green-500 bg-green-50 text-green-700'
                          : 'border-gray-300 hover:border-green-300'
                      }`}
                    >
                      <input
                        type="checkbox"
                        checked={formData.interests.includes(interest.id)}
                        onChange={() => handleInterestChange(interest.id)}
                        className="sr-only"
                      />
                      <span className="text-xl mr-2">{interest.icon}</span>
                      <span className="text-sm font-medium">{interest.label}</span>
                    </label>
                  ))}
                </div>
                {errors.interests && <p className="text-red-500 text-sm mt-1">{errors.interests}</p>}
              </div>

              {/* Availability */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ‡¶∏‡¶Æ‡¶Ø‡¶º‡ßá‡¶∞ ‡¶∏‡ßÅ‡¶¨‡¶ø‡¶ß‡¶æ *
                </label>
                <select
                  name="availability"
                  value={formData.availability}
                  onChange={handleInputChange}
                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent ${
                    errors.availability ? 'border-red-500' : 'border-gray-300'
                  }`}
                >
                  <option value="">‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®</option>
                  <option value="weekends">‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶∏‡¶™‡ßç‡¶§‡¶æ‡¶π‡¶æ‡¶®‡ßç‡¶§‡ßá</option>
                  <option value="weekdays">‡¶∏‡¶™‡ßç‡¶§‡¶æ‡¶π‡ßá‡¶∞ ‡¶¶‡¶ø‡¶®‡ßá</option>
                  <option value="flexible">‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶Æ‡¶Ø‡¶º</option>
                  <option value="evenings">‡¶∏‡¶®‡ßç‡¶ß‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶™‡¶∞</option>
                </select>
                {errors.availability && <p className="text-red-500 text-sm mt-1">{errors.availability}</p>}
              </div>

              {/* Skills and Experience */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶¶‡¶ï‡ßç‡¶∑‡¶§‡¶æ
                  </label>
                  <textarea
                    name="skills"
                    value={formData.skills}
                    onChange={handleInputChange}
                    rows="3"
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                    placeholder="‡¶Ø‡ßá‡¶Æ‡¶®: ‡¶ï‡¶Æ‡ßç‡¶™‡¶ø‡¶â‡¶ü‡¶æ‡¶∞, ‡¶≠‡¶æ‡¶∑‡¶æ, ‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶æ ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨ ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û‡¶§‡¶æ
                  </label>
                  <textarea
                    name="experience"
                    value={formData.experience}
                    onChange={handleInputChange}
                    rows="3"
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                    placeholder="‡¶∏‡ßç‡¶¨‡ßá‡¶ö‡ßç‡¶õ‡¶æ‡¶∏‡ßá‡¶¨‡ßÄ ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨ ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û‡¶§‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®"
                  />
                </div>
              </div>

              {/* Emergency Contact */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ *
                  </label>
                  <input
                    type="text"
                    name="emergencyContact"
                    value={formData.emergencyContact}
                    onChange={handleInputChange}
                    className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent ${
                      errors.emergencyContact ? 'border-red-500' : 'border-gray-300'
                    }`}
                    placeholder="‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶Ø‡¶º ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ"
                  />
                  {errors.emergencyContact && <p className="text-red-500 text-sm mt-1">{errors.emergencyContact}</p>}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó‡ßá‡¶∞ ‡¶´‡ßã‡¶® *
                  </label>
                  <input
                    type="tel"
                    name="emergencyPhone"
                    value={formData.emergencyPhone}
                    onChange={handleInputChange}
                    className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent ${
                      errors.emergencyPhone ? 'border-red-500' : 'border-gray-300'
                    }`}
                    placeholder="+‡ßÆ‡ßÆ‡ß¶ ‡ßß‡ß≠xxxxxxxx"
                  />
                  {errors.emergencyPhone && <p className="text-red-500 text-sm mt-1">{errors.emergencyPhone}</p>}
                </div>
              </div>

              {/* Motivation */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ‡¶∏‡ßç‡¶¨‡ßá‡¶ö‡ßç‡¶õ‡¶æ‡¶∏‡ßá‡¶¨‡¶ï ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶™‡ßç‡¶∞‡ßá‡¶∞‡¶£‡¶æ *
                </label>
                <textarea
                  name="motivation"
                  value={formData.motivation}
                  onChange={handleInputChange}
                  rows="4"
                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent ${
                    errors.motivation ? 'border-red-500' : 'border-gray-300'
                  }`}
                  placeholder="‡¶ï‡ßá‡¶® ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡ßç‡¶¨‡ßá‡¶ö‡ßç‡¶õ‡¶æ‡¶∏‡ßá‡¶¨‡¶ï ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®?"
                />
                {errors.motivation && <p className="text-red-500 text-sm mt-1">{errors.motivation}</p>}
              </div>

              {/* Submit Button */}
              <div className="text-center pt-6">
                <button
                  type="submit"
                  disabled={isSubmitting}
                  className={`px-8 py-4 rounded-lg font-semibold text-lg transition-all duration-300 ${
                    isSubmitting
                      ? 'bg-gray-400 cursor-not-allowed'
                      : 'bg-green-600 hover:bg-green-700 transform hover:scale-105'
                  } text-white`}
                >
                  {isSubmitting ? (
                    <span className="flex items-center">
                      <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      ‡¶ú‡¶Æ‡¶æ ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...
                    </span>
                  ) : (
                    '‡¶®‡¶ø‡¶¨‡¶®‡ßç‡¶ß‡¶® ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®'
                  )}
                </button>
              </div>
            </form>
          </div>
        </div>
      </section>
    </div>
  );
}
