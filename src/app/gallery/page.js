'use client';

import { useState, useEffect, useRef } from 'react';
import Image from 'next/image';

const GalleryPage = () => {
  const [activeCategory, setActiveCategory] = useState('all');
  const [selectedImage, setSelectedImage] = useState(null);
  const [isVisible, setIsVisible] = useState({});
  const sectionRefs = useRef({});

  const categories = [
    { id: 'all', name: '‡¶∏‡¶ï‡¶≤ ‡¶õ‡¶¨‡¶ø', icon: 'üñºÔ∏è' },
    { id: 'education', name: '‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßç‡¶Æ‡¶∏‡ßÇ‡¶ö‡¶ø', icon: 'üìö' },
    { id: 'health', name: '‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶∏‡ßá‡¶¨‡¶æ', icon: 'üè•' },
    { id: 'food', name: '‡¶ñ‡¶æ‡¶¶‡ßç‡¶Ø ‡¶¨‡¶ø‡¶§‡¶∞‡¶£', icon: 'üçΩÔ∏è' },
    { id: 'events', name: '‡¶Ö‡¶®‡ßÅ‡¶∑‡ßç‡¶†‡¶æ‡¶®', icon: 'üéâ' }
  ];

  const galleryImages = [
    {
      id: 1,
      src: '/assets/gallery-1.png',
      title: '‡¶ï‡¶Æ‡ßç‡¶™‡¶ø‡¶â‡¶ü‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡ßç‡¶Æ‡¶∏‡ßÇ‡¶ö‡¶ø',
      category: 'education',
      description: '‡¶Ø‡ßÅ‡¶¨‡¶ï‡¶¶‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡¶ø‡¶®‡¶æ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø‡ßá ‡¶ï‡¶Æ‡ßç‡¶™‡¶ø‡¶â‡¶ü‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡ßç‡¶Æ‡¶∏‡ßÇ‡¶ö‡¶ø‡¶∞ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¶‡ßÉ‡¶∂‡ßç‡¶Ø',
      date: '‡ßß‡ß´ ‡¶ú‡¶æ‡¶®‡ßÅ‡¶Ø‡¶º‡¶æ‡¶∞‡¶ø, ‡ß®‡ß¶‡ß®‡ß©'
    },
    {
      id: 2,
      src: '/assets/gallery-2.png',
      title: '‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶ï‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶™',
      category: 'health',
      description: '‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡ßÄ‡¶£ ‡¶è‡¶≤‡¶æ‡¶ï‡¶æ‡¶Ø‡¶º ‡¶Ü‡¶Ø‡¶º‡ßã‡¶ú‡¶ø‡¶§ ‡¶¨‡¶ø‡¶®‡¶æ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶ï‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶™',
      date: '‡ß®‡ß® ‡¶´‡ßá‡¶¨‡ßç‡¶∞‡ßÅ‡¶Ø‡¶º‡¶æ‡¶∞‡¶ø, ‡ß®‡ß¶‡ß®‡ß©'
    },
    {
      id: 3,
      src: '/assets/gallery-3.png',
      title: '‡¶ñ‡¶æ‡¶¶‡ßç‡¶Ø ‡¶¨‡¶ø‡¶§‡¶∞‡¶£ ‡¶ï‡¶∞‡ßç‡¶Æ‡¶∏‡ßÇ‡¶ö‡¶ø',
      category: 'food',
      description: '‡¶¶‡ßÅ‡¶∞‡ßç‡¶ó‡¶§ ‡¶è‡¶≤‡¶æ‡¶ï‡¶æ‡¶Ø‡¶º ‡¶ñ‡¶æ‡¶¶‡ßç‡¶Ø ‡¶∏‡¶æ‡¶Æ‡¶ó‡ßç‡¶∞‡ßÄ ‡¶¨‡¶ø‡¶§‡¶∞‡¶£ ‡¶ï‡¶∞‡ßç‡¶Æ‡¶∏‡ßÇ‡¶ö‡¶ø',
      date: '‡ßß‡ß¶ ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ö, ‡ß®‡ß¶‡ß®‡ß©'
    },
    {
      id: 4,
      src: '/assets/gallery-4.png',
      title: '‡¶¨‡¶æ‡¶∞‡ßç‡¶∑‡¶ø‡¶ï ‡¶∏‡¶Æ‡ßç‡¶Æ‡ßá‡¶≤‡¶®',
      category: 'events',
      description: '‡¶Ü‡¶π‡¶æ‡¶Æ‡ßç‡¶Æ‡¶¶ ‡¶´‡¶æ‡¶â‡¶®‡ßç‡¶°‡ßá‡¶∂‡¶®‡ßá‡¶∞ ‡¶¨‡¶æ‡¶∞‡ßç‡¶∑‡¶ø‡¶ï ‡¶∏‡¶Æ‡ßç‡¶Æ‡ßá‡¶≤‡¶® ‡¶ì ‡¶™‡ßÅ‡¶∞‡¶∏‡ßç‡¶ï‡¶æ‡¶∞ ‡¶¨‡¶ø‡¶§‡¶∞‡¶£‡ßÄ',
      date: '‡ß´ ‡¶è‡¶™‡ßç‡¶∞‡¶ø‡¶≤, ‡ß®‡ß¶‡ß®‡ß©'
    },
    {
      id: 5,
      src: '/assets/program1.jpg',
      title: '‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ ‡¶¨‡ßÉ‡¶§‡ßç‡¶§‡¶ø ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶®',
      category: 'education',
      description: '‡¶Æ‡ßá‡¶ß‡¶æ‡¶¨‡ßÄ ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶∞‡ßç‡¶•‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶¨‡ßÉ‡¶§‡ßç‡¶§‡¶ø ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶Ö‡¶®‡ßÅ‡¶∑‡ßç‡¶†‡¶æ‡¶®',
      date: '‡ßß‡ßÆ ‡¶Æ‡ßá, ‡ß®‡ß¶‡ß®‡ß©'
    },
    {
      id: 6,
      src: '/assets/program2.jpg',
      title: '‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶æ ‡¶∏‡ßá‡¶¨‡¶æ',
      category: 'health',
      description: '‡¶¨‡¶ø‡¶®‡¶æ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø‡ßá ‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶æ ‡¶∏‡ßá‡¶¨‡¶æ ‡¶ì ‡¶ì‡¶∑‡ßÅ‡¶ß ‡¶¨‡¶ø‡¶§‡¶∞‡¶£ ‡¶ï‡¶∞‡ßç‡¶Æ‡¶∏‡ßÇ‡¶ö‡¶ø',
      date: '‡ß®‡ß´ ‡¶ú‡ßÅ‡¶®, ‡ß®‡ß¶‡ß®‡ß©'
    },
    {
      id: 7,
      src: '/assets/program3.jpg',
      title: '‡¶á‡¶´‡¶§‡¶æ‡¶∞ ‡¶¨‡¶ø‡¶§‡¶∞‡¶£',
      category: 'food',
      description: '‡¶∞‡¶Æ‡¶ú‡¶æ‡¶® ‡¶Æ‡¶æ‡¶∏‡ßá ‡¶¶‡¶∞‡¶ø‡¶¶‡ßç‡¶∞ ‡¶™‡¶∞‡¶ø‡¶¨‡¶æ‡¶∞‡¶ó‡ßÅ‡¶≤‡ßã‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶á‡¶´‡¶§‡¶æ‡¶∞ ‡¶¨‡¶ø‡¶§‡¶∞‡¶£',
      date: '‡ßß‡ß® ‡¶ú‡ßÅ‡¶≤‡¶æ‡¶á, ‡ß®‡ß¶‡ß®‡ß©'
    },
    {
      id: 8,
      src: '/assets/about.jpg',
      title: '‡¶∏‡ßç‡¶¨‡ßá‡¶ö‡ßç‡¶õ‡¶æ‡¶∏‡ßá‡¶¨‡¶ï ‡¶™‡ßç‡¶∞‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶£',
      category: 'events',
      description: '‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡ßç‡¶¨‡ßá‡¶ö‡ßç‡¶õ‡¶æ‡¶∏‡ßá‡¶¨‡¶ï‡¶¶‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡ßç‡¶Æ‡¶∏‡ßÇ‡¶ö‡¶ø',
      date: '‡ßÆ ‡¶Ü‡¶ó‡¶∏‡ßç‡¶ü, ‡ß®‡ß¶‡ß®‡ß©'
    },
    {
      id: 9,
      src: '/assets/unnamed.jpg',
      title: '‡¶∂‡ßÄ‡¶§‡¶¨‡¶∏‡ßç‡¶§‡ßç‡¶∞ ‡¶¨‡¶ø‡¶§‡¶∞‡¶£',
      category: 'food',
      description: '‡¶∂‡ßÄ‡¶§‡¶ï‡¶æ‡¶≤‡ßá ‡¶Ö‡¶∏‡¶π‡¶æ‡¶Ø‡¶º ‡¶Æ‡¶æ‡¶®‡ßÅ‡¶∑‡¶¶‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶ï‡¶Æ‡ßç‡¶¨‡¶≤ ‡¶ì ‡¶ó‡¶∞‡¶Æ ‡¶ï‡¶æ‡¶™‡¶°‡¶º ‡¶¨‡¶ø‡¶§‡¶∞‡¶£',
      date: '‡ß®‡ß¶ ‡¶°‡¶ø‡¶∏‡ßá‡¶Æ‡ßç‡¶¨‡¶∞, ‡ß®‡ß¶‡ß®‡ß©'
    }
  ];

  const filteredImages = activeCategory === 'all' 
    ? galleryImages 
    : galleryImages.filter(image => image.category === activeCategory);

  useEffect(() => {
    const observers = {};
    
    Object.keys(sectionRefs.current).forEach(key => {
      if (sectionRefs.current[key]) {
        observers[key] = new IntersectionObserver(
          ([entry]) => {
            if (entry.isIntersecting) {
              setIsVisible(prev => ({ ...prev, [key]: true }));
            }
          },
          { threshold: 0.3 }
        );
        observers[key].observe(sectionRefs.current[key]);
      }
    });

    return () => {
      Object.values(observers).forEach(observer => observer.disconnect());
    };
  }, []);

  const setSectionRef = (key) => (el) => {
    sectionRefs.current[key] = el;
  };

  const openLightbox = (image) => {
    setSelectedImage(image);
    document.body.style.overflow = 'hidden';
  };

  const closeLightbox = () => {
    setSelectedImage(null);
    document.body.style.overflow = 'unset';
  };

  const nextImage = () => {
    const currentIndex = filteredImages.findIndex(img => img.id === selectedImage.id);
    const nextIndex = (currentIndex + 1) % filteredImages.length;
    setSelectedImage(filteredImages[nextIndex]);
  };

  const prevImage = () => {
    const currentIndex = filteredImages.findIndex(img => img.id === selectedImage.id);
    const prevIndex = (currentIndex - 1 + filteredImages.length) % filteredImages.length;
    setSelectedImage(filteredImages[prevIndex]);
  };

  return (
    <div className="min-h-screen">
      {/* Hero Section */}
      <section className="relative h-96 bg-gradient-to-r from-green-600 to-green-700 flex items-center">
        <div className="absolute inset-0 bg-black bg-opacity-30"></div>
        <div className="container mx-auto px-4 relative z-10">
          <div className="text-center text-white">
            <h1 className="text-5xl font-bold mb-4">‡¶õ‡¶¨‡¶ø‡¶∞ ‡¶ó‡ßç‡¶Ø‡¶æ‡¶≤‡¶æ‡¶∞‡ßÄ</h1>
            <p className="text-xl text-green-100 max-w-2xl mx-auto">
              ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡ßç‡¶∞‡¶Æ‡ßá‡¶∞ ‡¶∏‡ßç‡¶Æ‡ßÉ‡¶§‡¶ø‡¶Æ‡¶Ø‡¶º ‡¶Æ‡ßÅ‡¶π‡ßÇ‡¶∞‡ßç‡¶§‡¶ó‡ßÅ‡¶≤‡ßã
            </p>
          </div>
        </div>
      </section>

      {/* Filter Categories */}
      <section 
        ref={setSectionRef('filter')}
        className="py-12 bg-white sticky top-26 z-30 shadow-md"
      >
        <div className="container mx-auto px-4">
          <div
            className={`flex flex-wrap justify-center gap-4 transform transition-all duration-1000 ${
              isVisible.filter ? 'translate-y-0 opacity-100' : 'translate-y-10 opacity-0'
            }`}
          >
            {categories.map((category) => (
              <button
                key={category.id}
                onClick={() => setActiveCategory(category.id)}
                className={`flex items-center space-x-2 px-6 py-3 rounded-full font-semibold transition-all duration-300 transform hover:scale-105 ${
                  activeCategory === category.id
                    ? 'bg-green-600 text-white shadow-lg'
                    : 'bg-gray-100 text-gray-700 hover:bg-green-100 hover:text-green-700'
                }`}
              >
                <span className="text-lg">{category.icon}</span>
                <span>{category.name}</span>
              </button>
            ))}
          </div>
        </div>
      </section>

      {/* Gallery Grid */}
      <section 
        ref={setSectionRef('gallery')}
        className="py-20 bg-gray-50"
      >
        <div className="container mx-auto px-4">
          <div className="grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {filteredImages.map((image, index) => (
              <div
                key={image.id}
                className={`group cursor-pointer transform transition-all duration-500 hover:scale-105 ${
                  isVisible.gallery ? 'translate-y-0 opacity-100' : 'translate-y-10 opacity-0'
                }`}
                style={{ transitionDelay: `${index * 100}ms` }}
                onClick={() => openLightbox(image)}
              >
                <div className="relative overflow-hidden rounded-xl shadow-lg bg-white">
                  <div className="relative h-64">
                    <Image
                      src={image.src}
                      alt={image.title}
                      fill
                      className="object-cover transition-transform duration-500 group-hover:scale-110"
                    />
                    <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-30 transition-all duration-300 flex items-center justify-center">
                      <div className="opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                        <svg className="w-12 h-12 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v3m0 0v3m0-3h3m-3 0H7" />
                        </svg>
                      </div>
                    </div>
                  </div>
                  
                  <div className="p-4">
                    <h3 className="font-bold text-gray-800 mb-2 line-clamp-2">
                      {image.title}
                    </h3>
                    <p className="text-gray-600 text-sm mb-2 line-clamp-2">
                      {image.description}
                    </p>
                    <p className="text-green-600 text-xs font-semibold">
                      {image.date}
                    </p>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Lightbox */}
      {selectedImage && (
        <div className="fixed inset-0 bg-black bg-opacity-90 z-50 flex items-center justify-center p-4">
          <div className="relative max-w-4xl max-h-full">
            <button
              onClick={closeLightbox}
              className="absolute top-4 right-4 text-white hover:text-gray-300 z-10"
            >
              <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
            
            <button
              onClick={prevImage}
              className="absolute left-4 top-1/2 transform -translate-y-1/2 text-white hover:text-gray-300 z-10"
            >
              <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
            </button>
            
            <button
              onClick={nextImage}
              className="absolute right-4 top-1/2 transform -translate-y-1/2 text-white hover:text-gray-300 z-10"
            >
              <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
              </svg>
            </button>
            
            <div className="relative">
              <Image
                src={selectedImage.src}
                alt={selectedImage.title}
                width={800}
                height={600}
                className="object-contain max-h-[80vh] w-auto"
              />
              
              <div className="absolute bottom-0 left-0 right-0 bg-black bg-opacity-70 text-white p-4">
                <h3 className="text-xl font-bold mb-2">{selectedImage.title}</h3>
                <p className="text-gray-300 mb-2">{selectedImage.description}</p>
                <p className="text-green-400 text-sm">{selectedImage.date}</p>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default GalleryPage;
