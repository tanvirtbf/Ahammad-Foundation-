'use client';

import { useState, useEffect, useRef } from 'react';
import Image from 'next/image';

const VideosPage = () => {
  const [activeCategory, setActiveCategory] = useState('all');
  const [selectedVideo, setSelectedVideo] = useState(null);
  const [isVisible, setIsVisible] = useState({});
  const sectionRefs = useRef({});

  const categories = [
    { id: 'all', name: '‡¶∏‡¶ï‡¶≤ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì', icon: 'üé¨' },
    { id: 'programs', name: '‡¶ï‡¶∞‡ßç‡¶Æ‡¶∏‡ßÇ‡¶ö‡¶ø', icon: 'üìã' },
    { id: 'events', name: '‡¶Ö‡¶®‡ßÅ‡¶∑‡ßç‡¶†‡¶æ‡¶®', icon: 'üéâ' },
    { id: 'testimonials', name: '‡¶™‡ßç‡¶∞‡¶∂‡¶Ç‡¶∏‡¶æ‡¶™‡¶§‡ßç‡¶∞', icon: 'üí¨' },
    { id: 'awareness', name: '‡¶∏‡¶ö‡ßá‡¶§‡¶®‡¶§‡¶æ', icon: 'üì¢' }
  ];

  const videos = [
    {
      id: 1,
      title: '‡¶Ü‡¶π‡¶æ‡¶Æ‡ßç‡¶Æ‡¶¶ ‡¶´‡¶æ‡¶â‡¶®‡ßç‡¶°‡ßá‡¶∂‡¶®‡ßá‡¶∞ ‡¶™‡¶∞‡¶ø‡¶ö‡¶ø‡¶§‡¶ø',
      category: 'programs',
      thumbnail: '/assets/desktopHero.png',
      videoId: 'dQw4w9WgXcQ', // YouTube video ID (dummy)
      description: '‡¶Ü‡¶π‡¶æ‡¶Æ‡ßç‡¶Æ‡¶¶ ‡¶´‡¶æ‡¶â‡¶®‡ßç‡¶°‡ßá‡¶∂‡¶®‡ßá‡¶∞ ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡ßç‡¶∞‡¶Æ ‡¶ì ‡¶â‡¶¶‡ßç‡¶¶‡ßá‡¶∂‡ßç‡¶Ø ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶™‡¶∞‡¶ø‡¶ö‡¶ø‡¶§‡¶ø',
      duration: '‡ß´:‡ß©‡ß¶',
      views: '‡ßß‡ß®,‡ß´‡ß¶‡ß¶',
      date: '‡ßß‡ß´ ‡¶ú‡¶æ‡¶®‡ßÅ‡¶Ø‡¶º‡¶æ‡¶∞‡¶ø, ‡ß®‡ß¶‡ß®‡ß©'
    },
    {
      id: 2,
      title: '‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ ‡¶¨‡ßÉ‡¶§‡ßç‡¶§‡¶ø ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶Ö‡¶®‡ßÅ‡¶∑‡ßç‡¶†‡¶æ‡¶®',
      category: 'events',
      thumbnail: '/assets/program1.jpg',
      videoId: 'dQw4w9WgXcQ',
      description: '‡¶Æ‡ßá‡¶ß‡¶æ‡¶¨‡ßÄ ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶∞‡ßç‡¶•‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶¨‡ßÉ‡¶§‡ßç‡¶§‡¶ø ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶Ö‡¶®‡ßÅ‡¶∑‡ßç‡¶†‡¶æ‡¶®‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì',
      duration: '‡ßß‡ß®:‡ßß‡ß´',
      views: '‡ßÆ,‡ß≠‡ß¶‡ß¶',
      date: '‡ß®‡ß® ‡¶´‡ßá‡¶¨‡ßç‡¶∞‡ßÅ‡¶Ø‡¶º‡¶æ‡¶∞‡¶ø, ‡ß®‡ß¶‡ß®‡ß©'
    },
    {
      id: 3,
      title: '‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶ï‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶™‡ßá‡¶∞ ‡¶∏‡¶´‡¶≤‡¶§‡¶æ‡¶∞ ‡¶ó‡¶≤‡ßç‡¶™',
      category: 'testimonials',
      thumbnail: '/assets/program2.jpg',
      videoId: 'dQw4w9WgXcQ',
      description: '‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡ßÄ‡¶£ ‡¶è‡¶≤‡¶æ‡¶ï‡¶æ‡¶Ø‡¶º ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶ï‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶™‡ßá ‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶æ ‡¶®‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶∞‡ßã‡¶ó‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û‡¶§‡¶æ',
      duration: '‡ßÆ:‡ß™‡ß´',
      views: '‡ß¨,‡ß®‡ß¶‡ß¶',
      date: '‡ßß‡ß¶ ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ö, ‡ß®‡ß¶‡ß®‡ß©'
    },
    {
      id: 4,
      title: '‡¶ñ‡¶æ‡¶¶‡ßç‡¶Ø ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶§‡ßç‡¶§‡¶æ‡¶∞ ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨',
      category: 'awareness',
      thumbnail: '/assets/program3.jpg',
      videoId: 'dQw4w9WgXcQ',
      description: '‡¶ñ‡¶æ‡¶¶‡ßç‡¶Ø ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶§‡ßç‡¶§‡¶æ ‡¶ì ‡¶™‡ßÅ‡¶∑‡ßç‡¶ü‡¶ø ‡¶∏‡¶ö‡ßá‡¶§‡¶®‡¶§‡¶æ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡¶ï ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶Æ‡ßÇ‡¶≤‡¶ï ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì',
      duration: '‡ß¨:‡ß®‡ß¶',
      views: '‡ßØ,‡ßÆ‡ß¶‡ß¶',
      date: '‡ß´ ‡¶è‡¶™‡ßç‡¶∞‡¶ø‡¶≤, ‡ß®‡ß¶‡ß®‡ß©'
    },
    {
      id: 5,
      title: '‡¶¨‡¶æ‡¶∞‡ßç‡¶∑‡¶ø‡¶ï ‡¶∏‡¶Æ‡ßç‡¶Æ‡ßá‡¶≤‡¶® ‡ß®‡ß¶‡ß®‡ßÉ',
      category: 'events',
      thumbnail: '/assets/gallery-4.png',
      videoId: 'dQw4w9WgXcQ',
      description: '‡¶Ü‡¶π‡¶æ‡¶Æ‡ßç‡¶Æ‡¶¶ ‡¶´‡¶æ‡¶â‡¶®‡ßç‡¶°‡ßá‡¶∂‡¶®‡ßá‡¶∞ ‡¶¨‡¶æ‡¶∞‡ßç‡¶∑‡¶ø‡¶ï ‡¶∏‡¶Æ‡ßç‡¶Æ‡ßá‡¶≤‡¶® ‡¶ì ‡¶™‡ßÅ‡¶∞‡¶∏‡ßç‡¶ï‡¶æ‡¶∞ ‡¶¨‡¶ø‡¶§‡¶∞‡¶£‡ßÄ ‡¶Ö‡¶®‡ßÅ‡¶∑‡ßç‡¶†‡¶æ‡¶®',
      duration: '‡ß®‡ß´:‡ßß‡ß¶',
      views: '‡ßß‡ß´,‡ß©‡ß¶‡ß¶',
      date: '‡ßß‡ßÆ ‡¶Æ‡ßá, ‡ß®‡ß¶‡ß®‡ß©'
    },
    {
      id: 6,
      title: '‡¶∏‡ßç‡¶¨‡ßá‡¶ö‡ßç‡¶õ‡¶æ‡¶∏‡ßá‡¶¨‡¶ï‡¶¶‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶£',
      category: 'programs',
      thumbnail: '/assets/about.jpg',
      videoId: 'dQw4w9WgXcQ',
      description: '‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡ßç‡¶¨‡ßá‡¶ö‡ßç‡¶õ‡¶æ‡¶∏‡ßá‡¶¨‡¶ï‡¶¶‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶Ø‡¶º‡ßã‡¶ú‡¶ø‡¶§ ‡¶™‡ßç‡¶∞‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡ßç‡¶Æ‡¶∏‡ßÇ‡¶ö‡¶ø‡¶∞ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì',
      duration: '‡ßß‡ß´:‡ß©‡ß´',
      views: '‡ß™,‡ßØ‡ß¶‡ß¶',
      date: '‡ß®‡ß´ ‡¶ú‡ßÅ‡¶®, ‡ß®‡ß¶‡ß®‡ß©'
    },
    {
      id: 7,
      title: '‡¶â‡¶™‡¶ï‡¶æ‡¶∞‡¶≠‡ßã‡¶ó‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶ï‡ßÉ‡¶§‡¶ú‡ßç‡¶û‡¶§‡¶æ',
      category: 'testimonials',
      thumbnail: '/assets/gallery-1.png',
      videoId: 'dQw4w9WgXcQ',
      description: '‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡ßá‡¶¨‡¶æ ‡¶ó‡ßç‡¶∞‡¶π‡¶£‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶™‡¶∞‡¶ø‡¶¨‡¶æ‡¶∞‡¶ó‡ßÅ‡¶≤‡ßã‡¶∞ ‡¶ï‡ßÉ‡¶§‡¶ú‡ßç‡¶û‡¶§‡¶æ ‡¶ì ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û‡¶§‡¶æ',
      duration: '‡ßß‡ß¶:‡ß®‡ß´',
      views: '‡ß≠,‡ß¨‡ß¶‡ß¶',
      date: '‡ßß‡ß® ‡¶ú‡ßÅ‡¶≤‡¶æ‡¶á, ‡ß®‡ß¶‡ß®‡ß©'
    },
    {
      id: 8,
      title: '‡¶ï‡ßã‡¶≠‡¶ø‡¶°-‡ßß‡ßØ ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ ‡¶ï‡¶∞‡ßç‡¶Æ‡¶∏‡ßÇ‡¶ö‡¶ø',
      category: 'programs',
      thumbnail: '/assets/unnamed.jpg',
      videoId: 'dQw4w9WgXcQ',
      description: '‡¶ï‡ßã‡¶≠‡¶ø‡¶°-‡ßß‡ßØ ‡¶Æ‡¶π‡¶æ‡¶Æ‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ ‡¶ï‡¶∞‡ßç‡¶Æ‡¶∏‡ßÇ‡¶ö‡¶ø‡¶∞ ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶ø',
      duration: '‡ßß‡ßÆ:‡ß´‡ß¶',
      views: '‡ß®‡ß¶,‡ßß‡ß¶‡ß¶',
      date: '‡ßÆ ‡¶Ü‡¶ó‡¶∏‡ßç‡¶ü, ‡ß®‡ß¶‡ß®‡ß©'
    },
    {
      id: 9,
      title: '‡¶™‡¶∞‡¶ø‡¶ö‡ßç‡¶õ‡¶®‡ßç‡¶®‡¶§‡¶æ ‡¶∏‡¶ö‡ßá‡¶§‡¶®‡¶§‡¶æ',
      category: 'awareness',
      thumbnail: '/assets/gallery-2.png',
      videoId: 'dQw4w9WgXcQ',
      description: '‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶ì ‡¶™‡¶∞‡¶ø‡¶ö‡ßç‡¶õ‡¶®‡ßç‡¶®‡¶§‡¶æ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡¶ï ‡¶∏‡¶ö‡ßá‡¶§‡¶®‡¶§‡¶æ‡¶Æ‡ßÇ‡¶≤‡¶ï ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì',
      duration: '‡ß≠:‡ßß‡ß´',
      views: '‡ß´,‡ßÆ‡ß¶‡ß¶',
      date: '‡ß®‡ß¶ ‡¶∏‡ßá‡¶™‡ßç‡¶ü‡ßá‡¶Æ‡ßç‡¶¨‡¶∞, ‡ß®‡ß¶‡ß®‡ß©'
    }
  ];

  const filteredVideos = activeCategory === 'all' 
    ? videos 
    : videos.filter(video => video.category === activeCategory);

  useEffect(() => {
    const observers = {};
    
    Object.keys(sectionRefs.current).forEach(key => {
      if (sectionRefs.current[key]) {
        observers[key] = new IntersectionObserver(
          ([entry]) => {
            if (entry.isIntersecting) {
              setIsVisible(prev => ({ ...prev, [key]: true }));
            }
          },
          { threshold: 0.3 }
        );
        observers[key].observe(sectionRefs.current[key]);
      }
    });

    return () => {
      Object.values(observers).forEach(observer => observer.disconnect());
    };
  }, []);

  const setSectionRef = (key) => (el) => {
    sectionRefs.current[key] = el;
  };

  const openVideoModal = (video) => {
    setSelectedVideo(video);
    document.body.style.overflow = 'hidden';
  };

  const closeVideoModal = () => {
    setSelectedVideo(null);
    document.body.style.overflow = 'unset';
  };

  return (
    <div className="min-h-screen">
      {/* Hero Section */}
      <section className="relative h-96 bg-gradient-to-r from-green-600 to-green-700 flex items-center">
        <div className="absolute inset-0 bg-black bg-opacity-30"></div>
        <div className="container mx-auto px-4 relative z-10">
          <div className="text-center text-white">
            <h1 className="text-5xl font-bold mb-4">‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ó‡ßç‡¶Ø‡¶æ‡¶≤‡¶æ‡¶∞‡ßÄ</h1>
            <p className="text-xl text-green-100 max-w-2xl mx-auto">
              ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡ßç‡¶∞‡¶Æ ‡¶ì ‡¶Ö‡¶®‡ßÅ‡¶∑‡ßç‡¶†‡¶æ‡¶®‡ßá‡¶∞ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π
            </p>
          </div>
        </div>
      </section>

      {/* Filter Categories */}
      <section 
        ref={setSectionRef('filter')}
        className="py-12 bg-white sticky top-26 z-30 shadow-md"
      >
        <div className="container mx-auto px-4">
          <div
            className={`flex flex-wrap justify-center gap-4 transform transition-all duration-1000 ${
              isVisible.filter ? 'translate-y-0 opacity-100' : 'translate-y-10 opacity-0'
            }`}
          >
            {categories.map((category) => (
              <button
                key={category.id}
                onClick={() => setActiveCategory(category.id)}
                className={`flex items-center space-x-2 px-6 py-3 rounded-full font-semibold transition-all duration-300 transform hover:scale-105 ${
                  activeCategory === category.id
                    ? 'bg-green-600 text-white shadow-lg'
                    : 'bg-gray-100 text-gray-700 hover:bg-green-100 hover:text-green-700'
                }`}
              >
                <span className="text-lg">{category.icon}</span>
                <span>{category.name}</span>
              </button>
            ))}
          </div>
        </div>
      </section>

      {/* Videos Grid */}
      <section 
        ref={setSectionRef('videos')}
        className="py-20 bg-gray-50"
      >
        <div className="container mx-auto px-4">
          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
            {filteredVideos.map((video, index) => (
              <div
                key={video.id}
                className={`bg-white rounded-2xl shadow-lg overflow-hidden hover:shadow-2xl transition-all duration-500 transform hover:-translate-y-2 cursor-pointer ${
                  isVisible.videos ? 'translate-y-0 opacity-100' : 'translate-y-10 opacity-0'
                }`}
                style={{ transitionDelay: `${index * 150}ms` }}
                onClick={() => openVideoModal(video)}
              >
                <div className="relative h-48 overflow-hidden group">
                  <Image
                    src={video.thumbnail}
                    alt={video.title}
                    fill
                    className="object-cover transition-transform duration-500 group-hover:scale-110"
                  />
                  <div className="absolute inset-0 bg-black bg-opacity-30 flex items-center justify-center">
                    <div className="bg-white bg-opacity-90 rounded-full p-4 transform transition-all duration-300 group-hover:scale-110">
                      <svg className="w-8 h-8 text-green-600" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M8 5v14l11-7z"/>
                      </svg>
                    </div>
                  </div>
                  <div className="absolute top-4 left-4 bg-black bg-opacity-70 text-white px-2 py-1 rounded text-sm">
                    {video.duration}
                  </div>
                  <div className="absolute bottom-4 right-4 bg-black bg-opacity-70 text-white px-2 py-1 rounded text-sm">
                    {video.views} ‡¶¶‡¶∞‡ßç‡¶∂‡¶®
                  </div>
                </div>
                
                <div className="p-6">
                  <h3 className="text-xl font-bold text-gray-800 mb-3 line-clamp-2">
                    {video.title}
                  </h3>
                  <p className="text-gray-600 mb-4 leading-relaxed line-clamp-3">
                    {video.description}
                  </p>
                  
                  <div className="flex items-center justify-between text-sm text-gray-500">
                    <span className="bg-green-100 text-green-700 px-2 py-1 rounded-full text-xs font-medium">
                      {categories.find(cat => cat.id === video.category)?.name}
                    </span>
                    <span>{video.date}</span>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Video Modal */}
      {selectedVideo && (
        <div className="fixed inset-0 bg-black bg-opacity-90 z-50 flex items-center justify-center p-4">
          <div className="relative max-w-4xl w-full">
            <button
              onClick={closeVideoModal}
              className="absolute top-4 right-4 text-white hover:text-gray-300 z-10"
            >
              <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
            
            <div className="bg-white rounded-lg overflow-hidden">
              <div className="relative aspect-video">
                <iframe
                  src={`https://www.youtube.com/embed/${selectedVideo.videoId}?autoplay=1`}
                  title={selectedVideo.title}
                  className="w-full h-full"
                  frameBorder="0"
                  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                  allowFullScreen
                ></iframe>
              </div>
              
              <div className="p-6">
                <h3 className="text-2xl font-bold text-gray-800 mb-3">
                  {selectedVideo.title}
                </h3>
                <p className="text-gray-600 mb-4 leading-relaxed">
                  {selectedVideo.description}
                </p>
                
                <div className="flex items-center justify-between text-sm text-gray-500">
                  <div className="flex items-center space-x-4">
                    <span className="bg-green-100 text-green-700 px-3 py-1 rounded-full font-medium">
                      {categories.find(cat => cat.id === selectedVideo.category)?.name}
                    </span>
                    <span>‚è±Ô∏è {selectedVideo.duration}</span>
                    <span>üëÅÔ∏è {selectedVideo.views} ‡¶¶‡¶∞‡ßç‡¶∂‡¶®</span>
                  </div>
                  <span>üìÖ {selectedVideo.date}</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default VideosPage;
